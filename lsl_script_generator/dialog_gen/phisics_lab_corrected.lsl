// This script is automatically generated by Andrew Yuan LSL automatic generation tool kit. 
// This tool reads from a dialog flow graph described in the DOT language 
// and outputs the script.

// Some variable that you might want to modify: dialog_box_interact_interval,
//    state_control_channel, and local_dialog_channle

key dialog_target = NULL_KEY; // key of the person to talk to
string state_name;            // name of the current state 
integer timer_count;          // counter of timer
integer dialog_box_interact_interval = 20; // time in second when dialog is expected
integer state_control_channel = 10001; // state_control channel
integer local_dialog_channel = 11001; // channel used by dialog box

string default_msg = "";
list default_button = [""];

string s0_msg = "Now you are going to teach a lab on Series and Parallel Circuits to the students. What would you do first? You have 1 minute to prepare and then start teaching.";
list s0_button = ["Yes", "No"];

string s1_msg = "Did you talk about learning objectives?";
list s1_button = ["Yes", "No"];

string s2_msg = "A learning objective informs studens what they are expected to achieve after the instruction. Can you think of 1 or 2 objective for this lab session?";
list s2_button = [];

string s3_msg = "Great! Keep in mind that informing students learn objectives help them better understand why they are doing this lab. Please click 'Continue' to go to the next stage";
list s3_button = ["Continue"];

string s4_msg = "Did you give a brief review of the lab's background?";
list s4_button = ["Yes", "No"];

string s5_msg = "Great! An overview would stimulate what students already know.";
list s5_button = ["Continue"];

string s6_msg = "Can you briefly describe the background of this lab? You may use the lab manual (in your resource library if you want to.";
list s6_button = [];

string s7_msg = "How would you demonstrate the experiment procedures?";
list s7_button = [];

string s8_msg = "Did you emphasize the key points?";
list s8_button = ["Yes", "No"];

string s9_msg = "Wonderful! This helps students recall and pay attention to the important steps of the experiments.";
list s9_button = ["Continue"];

string s10_msg = "Can you think of some key points?";
list s10_button = [];

string s11_msg = "What about common mistakes? Did you mention any?";
list s11_button = ["Yes", "No"];

string s12_msg = "Awesome! Pointing out these mistakes would also raise students attention and keep them away from these issues.";
list s12_button = ["Continue"];

string s13_msg = "Do you know what they are? Where to get such information?";
list s13_button = ["Yes", "No"];

string s14_msg = "Great! What would you do to find it out?";
list s14_button = [];

string s15_msg = "Okay, is this your first time teaching this lab?";
list s15_button = ["Yes", "No"];

string s16_msg = "Okay, talk to your TA supervisor or fellow TAs who have experience teaching this lab.";
list s16_button = ["Continue"];

string s17_msg = "You can go back to your previous students lab reports and see what were their common mistakes. Or, talk to your TA supervisor or fellow TAs who have experience teaching this lab.";
list s17_button = ["Continue"];

string s18_msg = "Knowing common problems not only help you prepare but also may keep students away from them.";
list s18_button = ["Continue"];

string s19_msg = "Do you have instructions to give to students before they start their experiments?";
list s19_button = ["Yes", "No"];

string s20_msg = "Great! What would the instructions be?";
list s20_button = [];

string s21_msg = "What about lab rules?";
list s21_button = [];

string s22_msg = "Ok, you are done with lab guide, proceed to the next stage.";
list s22_button = ["Okay"];

reset_script() {
  dialog_target = NULL_KEY;
  state_name = "default";
}

register_common_channel()
{
  llListen(state_control_channel, "", NULL_KEY, "");
  llListen(local_dialog_channel, "", NULL_KEY, "");
}

register_common_channel_timer(integer t)
{
  llListen(state_control_channel, "", NULL_KEY, "");
  llListen(local_dialog_channel, "", NULL_KEY, "");
  llSetTimerEvent(t);
}

common_state_entry(string n, string s, list l, integer t)
{
  state_name = n; timer_count = 0;
  if (l == [])
    llTextBox(dialog_target, s, local_dialog_channel);
  else llDialog(dialog_target, s, l, local_dialog_channel);
   register_common_channel_timer(t);
}

dialog_with_timer(string msg, list button, integer t)
{
  llSetTimerEvent(t);
  if (button == [])
    llTextBox(dialog_target, msg, local_dialog_channel);
  else llDialog(dialog_target, msg, button, local_dialog_channel);
}

dialog_with_timer_count(string msg, list button, integer t)
{
  timer_count ++;
  if (timer_count >= 3) {llSetTimerEvent(0); llSay(0, "timeout too many times, back to initial (idle) state"); state default;}
  llSetTimerEvent(t);
  if (button == [])
    llTextBox(dialog_target, msg, local_dialog_channel);
  else llDialog(dialog_target, msg, button, local_dialog_channel);
}

process_state_control_msg(integer c, string n, key ID, string msg) {
  if (c == state_control_channel) {
    dialog_target = ID;
    if (msg == "-start") {
      llSetTimerEvent(0); state s0;
    } else if ((msg == "-reset") || (msg == "-restart")) {
      reset_script();
      llSetTimerEvent(0);
      state default;
    } else if (msg == "-gotostate:default") {
      llSetTimerEvent(0);
      state default;
    } else if (msg == "-gotostate:s0") {
      llSetTimerEvent(0);
      state s0;
    } else if (msg == "-gotostate:s1") {
      llSetTimerEvent(0);
      state s1;
    } else if (msg == "-gotostate:s2") {
      llSetTimerEvent(0);
      state s2;
    } else if (msg == "-gotostate:s3") {
      llSetTimerEvent(0);
      state s3;
    } else if (msg == "-gotostate:s4") {
      llSetTimerEvent(0);
      state s4;
    } else if (msg == "-gotostate:s5") {
      llSetTimerEvent(0);
      state s5;
    } else if (msg == "-gotostate:s6") {
      llSetTimerEvent(0);
      state s6;
    } else if (msg == "-gotostate:s7") {
      llSetTimerEvent(0);
      state s7;
    } else if (msg == "-gotostate:s8") {
      llSetTimerEvent(0);
      state s8;
    } else if (msg == "-gotostate:s9") {
      llSetTimerEvent(0);
      state s9;
    } else if (msg == "-gotostate:s10") {
      llSetTimerEvent(0);
      state s10;
    } else if (msg == "-gotostate:s11") {
      llSetTimerEvent(0);
      state s11;
    } else if (msg == "-gotostate:s12") {
      llSetTimerEvent(0);
      state s12;
    } else if (msg == "-gotostate:s13") {
      llSetTimerEvent(0);
      state s13;
    } else if (msg == "-gotostate:s14") {
      llSetTimerEvent(0);
      state s14;
    } else if (msg == "-gotostate:s15") {
      llSetTimerEvent(0);
      state s15;
    } else if (msg == "-gotostate:s16") {
      llSetTimerEvent(0);
      state s16;
    } else if (msg == "-gotostate:s17") {
      llSetTimerEvent(0);
      state s17;
    } else if (msg == "-gotostate:s18") {
      llSetTimerEvent(0);
      state s18;
    } else if (msg == "-gotostate:s19") {
      llSetTimerEvent(0);
      state s19;
    } else if (msg == "-gotostate:s20") {
      llSetTimerEvent(0);
      state s20;
    } else if (msg == "-gotostate:s21") {
      llSetTimerEvent(0);
      state s21;
    } else if (msg == "-gotostate:s22") {
      llSetTimerEvent(0);
      state s22;
    } else {
      llSay(0, "unknown command "+ msg + ", ignored");
    }
  }
}

default {

  state_entry() {register_common_channel_timer(0);}

  touch_start(integer num_detected) {
    dialog_target = llDetectedKey(0);
    state s0;
  }

  listen(integer c, string n, key ID, string msg) {
    process_state_control_msg(c, n, ID, msg);
  }
}

state s0 {

  state_entry() {common_state_entry("s0", s0_msg, s0_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s0_msg, s0_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s0_msg, s0_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Yes") { llSetTimerEvent(0); state s1;}
      if (msg == "No") { llSetTimerEvent(0); state default;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s1 {

  state_entry() {common_state_entry("s1", s1_msg, s1_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s1_msg, s1_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s1_msg, s1_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Yes") { llSetTimerEvent(0); state s3;}
      if (msg == "No") { llSetTimerEvent(0); state s2;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s2 {

  state_entry() {common_state_entry("s2", s2_msg, s2_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s2_msg, s2_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s2_msg, s2_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      llSetTimerEvent(0); state s3;
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s3 {

  state_entry() {common_state_entry("s3", s3_msg, s3_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s3_msg, s3_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s3_msg, s3_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Continue") { llSetTimerEvent(0); state s4;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s4 {

  state_entry() {common_state_entry("s4", s4_msg, s4_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s4_msg, s4_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s4_msg, s4_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Yes") { llSetTimerEvent(0); state s5;}
      if (msg == "No") { llSetTimerEvent(0); state s6;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s5 {

  state_entry() {common_state_entry("s5", s5_msg, s5_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s5_msg, s5_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s5_msg, s5_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Continue") { llSetTimerEvent(0); state s7;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s6 {

  state_entry() {common_state_entry("s6", s6_msg, s6_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s6_msg, s6_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s6_msg, s6_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      llSetTimerEvent(0); state s5;
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s7 {

  state_entry() {common_state_entry("s7", s7_msg, s7_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s7_msg, s7_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s7_msg, s7_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      llSetTimerEvent(0); state s8;
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s8 {

  state_entry() {common_state_entry("s8", s8_msg, s8_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s8_msg, s8_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s8_msg, s8_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Yes") { llSetTimerEvent(0); state s9;}
      if (msg == "No") { llSetTimerEvent(0); state s10;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s9 {

  state_entry() {common_state_entry("s9", s9_msg, s9_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s9_msg, s9_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s9_msg, s9_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Continue") { llSetTimerEvent(0); state s11;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s10 {

  state_entry() {common_state_entry("s10", s10_msg, s10_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s10_msg, s10_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s10_msg, s10_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      llSetTimerEvent(0); state s9;
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s11 {

  state_entry() {common_state_entry("s11", s11_msg, s11_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s11_msg, s11_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s11_msg, s11_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Yes") { llSetTimerEvent(0); state s12;}
      if (msg == "No") { llSetTimerEvent(0); state s13;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s12 {

  state_entry() {common_state_entry("s12", s12_msg, s12_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s12_msg, s12_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s12_msg, s12_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Continue") { llSetTimerEvent(0); state s18;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s13 {

  state_entry() {common_state_entry("s13", s13_msg, s13_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s13_msg, s13_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s13_msg, s13_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Yes") { llSetTimerEvent(0); state s14;}
      if (msg == "No") { llSetTimerEvent(0); state s15;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s14 {

  state_entry() {common_state_entry("s14", s14_msg, s14_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s14_msg, s14_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s14_msg, s14_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      llSetTimerEvent(0); state s18;
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s15 {

  state_entry() {common_state_entry("s15", s15_msg, s15_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s15_msg, s15_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s15_msg, s15_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Yes") { llSetTimerEvent(0); state s16;}
      if (msg == "No") { llSetTimerEvent(0); state s17;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s16 {

  state_entry() {common_state_entry("s16", s16_msg, s16_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s16_msg, s16_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s16_msg, s16_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Continue") { llSetTimerEvent(0); state s18;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s17 {

  state_entry() {common_state_entry("s17", s17_msg, s17_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s17_msg, s17_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s17_msg, s17_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Continue") { llSetTimerEvent(0); state s18;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s18 {

  state_entry() {common_state_entry("s18", s18_msg, s18_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s18_msg, s18_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s18_msg, s18_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Continue") { llSetTimerEvent(0); state s19;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s19 {

  state_entry() {common_state_entry("s19", s19_msg, s19_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s19_msg, s19_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s19_msg, s19_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Yes") { llSetTimerEvent(0); state s20;}
      if (msg == "No") { llSetTimerEvent(0); state s21;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s20 {

  state_entry() {common_state_entry("s20", s20_msg, s20_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s20_msg, s20_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s20_msg, s20_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      llSetTimerEvent(0); state s21;
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s21 {

  state_entry() {common_state_entry("s21", s21_msg, s21_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s21_msg, s21_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s21_msg, s21_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      llSetTimerEvent(0); state s22;
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

state s22 {

  state_entry() {common_state_entry("s22", s22_msg, s22_button, dialog_box_interact_interval);}

  touch_start(integer num_detected) {dialog_with_timer(s22_msg, s22_button, dialog_box_interact_interval);}

  timer() {dialog_with_timer_count(s22_msg, s22_button, dialog_box_interact_interval);}

  listen(integer c, string n, key ID, string msg) {
    llSetTimerEvent(dialog_box_interact_interval);
    if (c == local_dialog_channel) {
      if (msg == "Okay") { llSetTimerEvent(0); state default;}
    } else {process_state_control_msg(c, n, ID, msg);}
}
}

